d_anonymized_long_munged = d_anonymized_long %>%
select(subids, trial_num, category, condition, selected) %>%
mutate(selected = lapply(str_split(selected, ","),
function(x) {str_sub(x, 4, 6)})) %>%
mutate(prop_sub = unlist(lapply(selected, function(x){sum(x == "sub")/2})),
prop_bas = unlist(lapply(selected, function(x){sum(x == "bas")/2})),
prop_sup = unlist(lapply(selected, function(x){sum(x == "sup")/4})),
exp = EXPTNUM) %>%
select(-selected)
# Write
write_csv(d_anonymized_long_munged, paste0("../data/munged_data/exp", EXPTNUM, "_data_munged.csv"))
# set exp number
EXPTNUM <- 6
## Read in and process data
raw_path <- paste0("../experiments/exp", EXPTNUM, "/production-results/")
files <- dir(raw_path)
d_raw <- data.frame()
for (i in 1:length(files)[1]) {
s <- fromJSON(paste0(raw_path, files[i]))
s$answers$asses = ifelse(is.null(s$answers$asses), "NA", s$answers$asses)
d_raw <- bind_rows(d_raw, data.frame(s))
}
names(d_raw) <- str_replace(names(d_raw), "answers.", "")
d_anonymized <- anonymize.sids(d_raw, "WorkerId")
raw_anonymized_path <- paste0("../data/anonymized_raw_data/exp", EXPTNUM, "_A.csv")
write_csv(d_anonymized, raw_anonymized_path)
# Munge
d_anonymized <- read_csv(raw_anonymized_path)
d_anonymized_long = d_anonymized %>%
gather(variable, value, contains("_")) %>%
mutate(trial_num =  unlist(lapply(strsplit(as.character(variable),
"_T"),function(x) x[2])),
variable = unlist(lapply(strsplit(as.character(variable),
"_"),function(x) x[1]))) %>%
spread(variable, value) %>%
mutate(trial_num = as.numeric(trial_num)) %>%
mutate_if(is.character, funs(as.factor))
d_anonymized_long_munged = d_anonymized_long %>%
select(subids, trial_num, category, condition, selected) %>%
mutate(selected = lapply(str_split(selected, ","),
function(x) {str_sub(x, 4, 6)})) %>%
mutate(prop_sub = unlist(lapply(selected, function(x){sum(x == "sub")/2})),
prop_bas = unlist(lapply(selected, function(x){sum(x == "bas")/2})),
prop_sup = unlist(lapply(selected, function(x){sum(x == "sup")/4})),
exp = EXPTNUM) %>%
select(-selected)
# Write
write_csv(d_anonymized_long_munged, paste0("../data/munged_data/exp", EXPTNUM, "_data_munged.csv"))
# set exp number
EXPTNUM <- 7
## Read in and process data
raw_path <- paste0("../experiments/exp", EXPTNUM, "/production-results/")
files <- dir(raw_path)
d_raw <- data.frame()
for (i in 1:length(files)[1]) {
s <- fromJSON(paste0(raw_path, files[i]))
s$answers$asses = ifelse(is.null(s$answers$asses), "NA", s$answers$asses)
d_raw <- bind_rows(d_raw, data.frame(s))
}
names(d_raw) <- str_replace(names(d_raw), "answers.", "")
d_anonymized <- anonymize.sids(d_raw, "WorkerId")
raw_anonymized_path <- paste0("../data/anonymized_raw_data/exp", EXPTNUM, "_A.csv")
write_csv(d_anonymized, raw_anonymized_path)
# Munge
d_anonymized <- read_csv(raw_anonymized_path)
d_anonymized_long = d_anonymized %>%
gather(variable, value, contains("_")) %>%
mutate(trial_num =  unlist(lapply(strsplit(as.character(variable),
"_T"),function(x) x[2])),
variable = unlist(lapply(strsplit(as.character(variable),
"_"),function(x) x[1]))) %>%
spread(variable, value) %>%
mutate(trial_num = as.numeric(trial_num)) %>%
mutate_if(is.character, funs(as.factor))
d_anonymized_long_munged = d_anonymized_long %>%
select(subids, trial_num, category, condition, selected) %>%
mutate(selected = lapply(str_split(selected, ","),
function(x) {str_sub(x, 4, 6)})) %>%
mutate(prop_sub = unlist(lapply(selected, function(x){sum(x == "sub")/2})),
prop_bas = unlist(lapply(selected, function(x){sum(x == "bas")/2})),
prop_sup = unlist(lapply(selected, function(x){sum(x == "sup")/4})),
exp = EXPTNUM) %>%
select(-selected)
# Write
write_csv(d_anonymized_long_munged, paste0("../data/munged_data/exp", EXPTNUM, "_data_munged.csv"))
# set exp number
EXPTNUM <- 8
## Read in and process data
raw_path <- paste0("../experiments/exp", EXPTNUM, "/production-results/")
files <- dir(raw_path)
d_raw <- data.frame()
for (i in 1:length(files)[1]) {
s <- fromJSON(paste0(raw_path, files[i]))
s$answers$asses = ifelse(is.null(s$answers$asses), "NA", s$answers$asses)
d_raw <- bind_rows(d_raw, data.frame(s))
}
names(d_raw) <- str_replace(names(d_raw), "answers.", "")
d_anonymized <- anonymize.sids(d_raw, "WorkerId")
raw_anonymized_path <- paste0("../data/anonymized_raw_data/exp", EXPTNUM, "_A.csv")
write_csv(d_anonymized, raw_anonymized_path)
# Munge
d_anonymized <- read_csv(raw_anonymized_path)
d_anonymized_long = d_anonymized %>%
gather(variable, value, contains("_")) %>%
mutate(trial_num =  unlist(lapply(strsplit(as.character(variable),
"_T"),function(x) x[2])),
variable = unlist(lapply(strsplit(as.character(variable),
"_"),function(x) x[1]))) %>%
spread(variable, value) %>%
mutate(trial_num = as.numeric(trial_num)) %>%
mutate_if(is.character, funs(as.factor))
d_anonymized_long_munged = d_anonymized_long %>%
select(subids, trial_num, category, condition, selected) %>%
mutate(selected = lapply(str_split(selected, ","),
function(x) {str_sub(x, 4, 6)})) %>%
mutate(prop_sub = unlist(lapply(selected, function(x){sum(x == "sub")/2})),
prop_bas = unlist(lapply(selected, function(x){sum(x == "bas")/2})),
prop_sup = unlist(lapply(selected, function(x){sum(x == "sup")/4})),
exp = EXPTNUM) %>%
select(-selected)
# Write
write_csv(d_anonymized_long_munged, paste0("../data/munged_data/exp", EXPTNUM, "_data_munged.csv"))
# set exp number
EXPTNUM <- 9
## Read in and process data
raw_path <- paste0("../experiments/exp", EXPTNUM, "/production-results/")
files <- dir(raw_path)
d_raw <- data.frame()
for (i in 1:length(files)[1]) {
s <- fromJSON(paste0(raw_path, files[i]))
s$answers$asses = ifelse(is.null(s$answers$asses), "NA", s$answers$asses)
d_raw <- bind_rows(d_raw, data.frame(s))
}
names(d_raw) <- str_replace(names(d_raw), "answers.", "")
d_anonymized <- anonymize.sids(d_raw, "WorkerId")
raw_anonymized_path <- paste0("../data/anonymized_raw_data/exp", EXPTNUM, "_A.csv")
write_csv(d_anonymized, raw_anonymized_path)
# Munge
d_anonymized <- read_csv(raw_anonymized_path)
d_anonymized_long = d_anonymized %>%
gather(variable, value, contains("_")) %>%
mutate(trial_num =  unlist(lapply(strsplit(as.character(variable),
"_T"),function(x) x[2])),
variable = unlist(lapply(strsplit(as.character(variable),
"_"),function(x) x[1]))) %>%
spread(variable, value) %>%
mutate(trial_num = as.numeric(trial_num)) %>%
mutate_if(is.character, funs(as.factor))
d_anonymized_long_munged = d_anonymized_long %>%
select(subids, trial_num, category, condition, selected) %>%
mutate(selected = lapply(str_split(selected, ","),
function(x) {str_sub(x, 4, 6)})) %>%
mutate(prop_sub = unlist(lapply(selected, function(x){sum(x == "sub")/2})),
prop_bas = unlist(lapply(selected, function(x){sum(x == "bas")/2})),
prop_sup = unlist(lapply(selected, function(x){sum(x == "sup")/4})),
exp = EXPTNUM) %>%
select(-selected)
# Write
write_csv(d_anonymized_long_munged, paste0("../data/munged_data/exp", EXPTNUM, "_data_munged.csv"))
# set exp number
EXPTNUM <- 10
## Read in and process data
raw_path <- paste0("../experiments/exp", EXPTNUM, "/production-results/")
files <- dir(raw_path)
d_raw <- data.frame()
for (i in 1:length(files)[1]) {
s <- fromJSON(paste0(raw_path, files[i]))
s$answers$asses = ifelse(is.null(s$answers$asses), "NA", s$answers$asses)
d_raw <- bind_rows(d_raw, data.frame(s))
}
names(d_raw) <- str_replace(names(d_raw), "answers.", "")
d_anonymized <- anonymize.sids(d_raw, "WorkerId")
raw_anonymized_path <- paste0("../data/anonymized_raw_data/exp", EXPTNUM, "_A.csv")
write_csv(d_anonymized, raw_anonymized_path)
# Munge
d_anonymized <- read_csv(raw_anonymized_path)
d_anonymized_long = d_anonymized %>%
gather(variable, value, contains("_")) %>%
mutate(trial_num =  unlist(lapply(strsplit(as.character(variable),
"_T"),function(x) x[2])),
variable = unlist(lapply(strsplit(as.character(variable),
"_"),function(x) x[1]))) %>%
spread(variable, value) %>%
mutate(trial_num = as.numeric(trial_num)) %>%
mutate_if(is.character, funs(as.factor))
d_anonymized_long_munged = d_anonymized_long %>%
select(subids, trial_num, category, condition, selected) %>%
mutate(selected = lapply(str_split(selected, ","),
function(x) {str_sub(x, 4, 6)})) %>%
mutate(prop_sub = unlist(lapply(selected, function(x){sum(x == "sub")/2})),
prop_bas = unlist(lapply(selected, function(x){sum(x == "bas")/2})),
prop_sup = unlist(lapply(selected, function(x){sum(x == "sup")/4})),
exp = EXPTNUM) %>%
select(-selected)
# Write
write_csv(d_anonymized_long_munged, paste0("../data/munged_data/exp", EXPTNUM, "_data_munged.csv"))
# set exp number
EXPTNUM <- 11
## Read in and process data
raw_path <- paste0("../experiments/exp", EXPTNUM, "/production-results/")
files <- dir(raw_path)
d_raw <- data.frame()
for (i in 1:length(files)[1]) {
s <- fromJSON(paste0(raw_path, files[i]))
s$answers$asses = ifelse(is.null(s$answers$asses), "NA", s$answers$asses)
d_raw <- bind_rows(d_raw, data.frame(s))
}
names(d_raw) <- str_replace(names(d_raw), "answers.", "")
d_anonymized <- anonymize.sids(d_raw, "WorkerId")
raw_anonymized_path <- paste0("../data/anonymized_raw_data/exp", EXPTNUM, "_A.csv")
write_csv(d_anonymized, raw_anonymized_path)
# Munge
d_anonymized <- read_csv(raw_anonymized_path)
d_anonymized_long = d_anonymized %>%
gather(variable, value, contains("_")) %>%
mutate(trial_num =  unlist(lapply(strsplit(as.character(variable),
"_T"),function(x) x[2])),
variable = unlist(lapply(strsplit(as.character(variable),
"_"),function(x) x[1]))) %>%
spread(variable, value) %>%
mutate(trial_num = as.numeric(trial_num)) %>%
mutate_if(is.character, funs(as.factor))
d_anonymized_long_munged = d_anonymized_long %>%
select(subids, trial_num, category, condition, selected) %>%
mutate(selected = lapply(str_split(selected, ","),
function(x) {str_sub(x, 4, 6)})) %>%
mutate(prop_sub = unlist(lapply(selected, function(x){sum(x == "sub")/2})),
prop_bas = unlist(lapply(selected, function(x){sum(x == "bas")/2})),
prop_sup = unlist(lapply(selected, function(x){sum(x == "sup")/4})),
exp = EXPTNUM) %>%
select(-selected)
# Write
write_csv(d_anonymized_long_munged, paste0("../data/munged_data/exp", EXPTNUM, "_data_munged.csv"))
# set exp number
EXPTNUM <- 12
## Read in and process data
raw_path <- paste0("../experiments/exp", EXPTNUM, "/production-results/")
files <- dir(raw_path)
d_raw <- data.frame()
for (i in 1:length(files)[1]) {
s <- fromJSON(paste0(raw_path, files[i]))
s$answers$asses = ifelse(is.null(s$answers$asses), "NA", s$answers$asses)
d_raw <- bind_rows(d_raw, data.frame(s))
}
names(d_raw) <- str_replace(names(d_raw), "answers.", "")
d_anonymized <- anonymize.sids(d_raw, "WorkerId")
raw_anonymized_path <- paste0("../data/anonymized_raw_data/exp", EXPTNUM, "_A.csv")
write_csv(d_anonymized, raw_anonymized_path)
# Munge
d_anonymized <- read_csv(raw_anonymized_path)
d_anonymized_long = d_anonymized %>%
gather(variable, value, contains("_")) %>%
mutate(trial_num =  unlist(lapply(strsplit(as.character(variable),
"_T"),function(x) x[2])),
variable = unlist(lapply(strsplit(as.character(variable),
"_"),function(x) x[1]))) %>%
spread(variable, value) %>%
mutate(trial_num = as.numeric(trial_num)) %>%
mutate_if(is.character, funs(as.factor))
d_anonymized_long_munged = d_anonymized_long %>%
select(subids, trial_num, category, condition, selected) %>%
mutate(selected = lapply(str_split(selected, ","),
function(x) {str_sub(x, 4, 6)})) %>%
mutate(prop_sub = unlist(lapply(selected, function(x){sum(x == "sub")/2})),
prop_bas = unlist(lapply(selected, function(x){sum(x == "bas")/2})),
prop_sup = unlist(lapply(selected, function(x){sum(x == "sup")/4})),
exp = EXPTNUM) %>%
select(-selected)
# Write
write_csv(d_anonymized_long_munged, paste0("../data/munged_data/exp", EXPTNUM, "_data_munged.csv"))
setwd("~/Documents/research/Projects/XTMEM/paper")
# Methods
```{r read_in_anon_data}
files <- dir("../data/munged_data/")
all_d <- data.frame()
for (i in 1:length(files)[1]) {
s <- read.csv(paste0("../data/munged_data/", files[i]))
all_d <- bind_rows(all_d, data.frame(s))
}
exp_key <- read_csv("../analysis/experiment_key.csv") %>%
mutate(order = gsub("\"", "", order))# this is because excel is dumb, grrr
```
dim(all_d)
600 * 12
all_d %>% count(exp)
dim(d_anonymized_long_munged)
tail(d_anonymized_long_munged)
files
files <- dir("../data/munged_data/")[-1]
prop_duplicates <- round(n_total-n_unique/n_total, 2) * 100
filesprop_duplicates
prop_duplicates
prop_duplicates <- round((n_total-n_unique)/n_total, 2) * 100
prop_duplicates
all_d_filtered <- read_csv("../../data/munged_data/all_data_munged_A.csv")
n_unique <- all_d_filtered %>%
distinct(exp, subids) %>%
summarize(n = n())
n_total <- all_d %>%
distinct(exp, subids) %>%
summarize(n = n())
prop_duplicates <- round((n_total-n_unique)/n_total, 2) * 100
```
all_d_clean <- all_d_filtered %>%
mutate(condition = as.factor(condition),
exp = as.character(exp),
condition = fct_recode(condition,
three_basic = "3bas",
three_subordinate = "3sub",
three_superordinate = "3sup")) %>%
filter(condition == "one" | condition == "three_subordinate") %>%
select(exp, everything())
all_ms_subj <- all_d_clean %>%
left_join(exp_key %>% select(exp, exp_recoded)) %>%
select(-exp) %>%
gather(variable, value, c(prop_sub, prop_bas, prop_sup)) %>%
group_by(condition,variable, exp_recoded, subids) %>%
mutate(value = as.numeric(value)) %>%
summarize(value = mean(value)) %>%
filter(condition == "one" | condition == "three_subordinate",
variable == 'prop_bas') %>%
spread(condition, value) %>%
ungroup() %>%
select(-variable)
# get effect sizes
LF_means <- all_ms_subj %>%
group_by(exp_recoded) %>%
summarize(m_one = mean(one),
sd_one = sd(one),
m_3sub = mean(three_subordinate),
sd_3sub = sd(three_subordinate),
n = n())
LF_effect_sizes <- LF_means %>%
do(data.frame(d = mes(.$m_one, .$m_3sub, .$sd_one,
.$sd_3sub, .$n, .$n, verbose = F)$d,
d_var = mes(.$m_one, .$sd_3sub, .$sd_one,
.$sd_3sub, .$n, .$n, verbose = F)$var.d)) %>%
mutate(high = d + (1.96*d_var),
low = d - (1.96*d_var),
es_type = "nonpaired",
exp_recoded = LF_means$exp_recoded) %>%
left_join(LF_means %>% select(exp_recoded, n)) %>%
select(exp_recoded, n, everything())
literature_effect_sizes <- read_csv("../data/literature_ES.csv") # see ../analysis/get_literature_ES.R
all_es <- literature_effect_sizes %>%
bind_rows(LF_effect_sizes) %>%
left_join(exp_key) %>%
mutate(source = ifelse(str_detect(exp_recoded, "XT"), "XT2007a",
ifelse(str_detect(exp_recoded, "SPSS"), "SPSS2011", "LF")),
source = fct_relevel(source, "XT2007a","SPSS2011","LF"),
timing = fct_relevel(timing,"simultaneous", "sequential")) %>%
mutate(source = as.numeric(source))
seq13 <- rma(d, d_var, dat = filter(all_es, timing == "sequential", order == "1-3"))
seq31 <- rma(d, d_var, dat = filter(all_es, timing == "sequential", order == "3-1"))
sim13 <- rma(d, d_var, dat = filter(all_es, timing == "simultaneous", order == "1-3"))
sim31 <- rma(d, d_var, dat = filter(all_es, timing == "simultaneous", order == "3-1"))
ma_es <- data.frame(order = c("1-3", "3-1", "1-3", "3-1"),
timing = c("sequential", "sequential", "simultaneous", "simultaneous"),
d = c(seq13$b[[1]], seq31$b[[1]], sim13$b[[1]], sim31$b[[1]]),
d_low = c(seq13$ci.lb[[1]], seq31$ci.lb[[1]], sim13$ci.lb[[1]], sim31$ci.lb[[1]]),
d_high = c(seq13$ci.ub[[1]], seq31$ci.ub[[1]], sim13$ci.ub[[1]], sim31$ci.ub[[1]]))
ggplot(all_es) +
geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = d_low, ymax = d_high),
fill = "red", alpha = 0.05, inherit.aes = FALSE, data = ma_es) +
geom_hline(aes(yintercept = d), data = ma_es, color = "red") +
scale_color_manual(values = c("black","grey63")) +
geom_pointrange(aes(x = jitter(source, 1.4),  y = d, ymax = high,
ymin = low, color = one_3sub_label, shape = fct_rev(blocking)),
size = .5) +
geom_hline(yintercept = 0, linetype = 2, color = "black") +
facet_grid(order ~ timing) +
scale_x_continuous(breaks = c(1:3), limits = c(.6, 3.3),
labels = c("XT","SPSS","LF")) +
ylab("Cohen's d") +
xlab("Paper") +
guides(color = guide_legend("Label"),
shape = guide_legend("Blocking"))  +
ggthemes::theme_few()
setwd("~/Documents/research/Projects/XTMEM/paper/SI")
exp_table <- exp_key %>%
slice(1:12) %>%
mutate(direct_replication_of_string = ifelse(is.na(direct_replication_of),
"", direct_replication_of),
timing = str_replace_all(timing, "sequential", "seq."),
timing = str_replace_all(timing, "simultaneous", "simult."),
one_3sub_label = str_replace_all(one_3sub_label, "different", "diff."),
exp_recoded = as.numeric(exp_recoded)) %>%
select(exp_recoded, n, timing, order, blocking,
one_3sub_label, direct_replication_of_string) %>%
arrange(exp_recoded)
exp_table <- exp_key %>%
slice(1:12) %>%
mutate(direct_replication_of_string = ifelse(is.na(direct_replication_of),
"", direct_replication_of),
timing = str_replace_all(timing, "sequential", "seq."),
timing = str_replace_all(timing, "simultaneous", "simult."),
one_3sub_label = str_replace_all(one_3sub_label, "different", "diff."),
exp_recoded = as.numeric(exp_recoded)) %>%
select(exp_recoded, timing, order, blocking,
one_3sub_label, direct_replication_of_string) %>%
arrange(exp_recoded)
exp_table
substr("cat",1)
substr("cat",1,2)
substr("cat",0,1)
raw_d_munged %>%
mutate(language = tolower(language),
language = ifelse(substr(language,0,1) == "e", "English", "other")) %>%
group_by(language) %>%
summarise(n = n()) %>%
kable()
raw_d_munged %>%
mutate(language = tolower(language),
language = ifelse(substr(language,0,1) == "e",
"English", "other")) %>%
group_by(language) %>%
summarise(n = n()) %>%
mutate(prop = round(n / sum(n),2)) %>%
kable()
```
raw_d_munged %>%
mutate(language = tolower(language),
language = ifelse(substr(language,0,1) == "e", # all e lanuages are english
"English", "Other")) %>%
group_by(language) %>%
summarise(n = n()) %>%
mutate(prop = round(n / sum(n),2)) %>%
kable()
ggplot(raw_d_mungedT,
aes(x = as.numeric(exp_recoded), y = total_time/60, fill = timing)) +
ylab("Time (min.)") +
xlab("Experiment") +
ggtitle("Task time")+
geom_boxplot() +
ggthemes::theme_few()
summary(raw_d_mungedT)
raw_d_munged
raw_d_mungedT <- raw_d_munged %>%
mutate(exp_recoded = fct_relevel(exp_recoded, "10", after = 9),
exp_recoded = fct_relevel(exp_recoded, "11", after = 10))
raw_d_mungedT$SubmitTime = gsub("T|Z","",raw_d_mungedT$SubmitTime)
raw_d_mungedT$AcceptTime = gsub("T|Z","",raw_d_mungedT$AcceptTime)
raw_d_mungedT$SubmitTime = strptime(raw_d_munged$SubmitTime, "%F%T")
raw_d_mungedT$AcceptTime = strptime(raw_d_mungedT$AcceptTime, "%F%T")
raw_d_mungedT$total_time = as.numeric(raw_d_mungedT$SubmitTime) - as.numeric(raw_d_mungedT$AcceptTime)
ggplot(raw_d_mungedT,
aes(x = exp_recoded, y = total_time/60, fill = timing)) +
ylab("Time (min.)") +
xlab("Experiment") +
ggtitle("Task time")+
geom_boxplot() +
ggthemes::theme_few()
```
raw_files <- dir("../../data/anonymized_raw_data/")
raw_d <- data.frame()
for (i in 1:length(raw_files)[1]) {
s <- read_csv(paste0("../../data/anonymized_raw_data/", raw_files[i])) %>%
mutate(exp = unlist(str_split(files[i], "_|exp"))[2]) %>%
select(exp, subids, SubmitTime, AcceptTime,
asses, comments, age, gender, education, enjoyment, language)
raw_d <- bind_rows(raw_d, data.frame(s))
}
raw_d_munged <- raw_d %>%
left_join(exp_key %>% select(exp, exp_recoded, timing)) %>%
mutate(exp_recoded = fct_relevel(exp_recoded, "10", after = 9),
exp_recoded = fct_relevel(exp_recoded, "11", after = 10)) %>%
select(-exp) %>%
ungroup()
```
raw_d_mungedT <- raw_d_munged
raw_d_mungedT$SubmitTime = gsub("T|Z","",raw_d_mungedT$SubmitTime)
raw_d_mungedT$AcceptTime = gsub("T|Z","",raw_d_mungedT$AcceptTime)
raw_d_mungedT$SubmitTime = strptime(raw_d_munged$SubmitTime, "%F%T")
raw_d_mungedT$AcceptTime = strptime(raw_d_mungedT$AcceptTime, "%F%T")
raw_d_mungedT$total_time = as.numeric(raw_d_mungedT$SubmitTime) - as.numeric(raw_d_mungedT$AcceptTime)
ggplot(raw_d_mungedT,
aes(x = exp_recoded, y = total_time/60, fill = timing)) +
ylab("Time (min.)") +
xlab("Experiment") +
ggtitle("Task time")+
geom_boxplot() +
ggthemes::theme_few()
levels(raw_d_mungedT$exp_recoded)
?exp_recoded
kable(exp_table, align = c('c', 'r', 'r', 'r', "r", "r", "r", "r"),
#col.names = c("Experiment \nNum.", "N", "Timing", "Condition \nOrder",
#              "Trial \nOrder", "Label", "Effect Size"),
caption = "Summary of our 10 experiments.",
col.names = c("Exp.", "N", "Timing", "Order",
"Blocking", "Label", "Effect Size", "Original \nExp."),
format = "latex", booktabs = TRUE) %>%
kable_styling(font_size = 12) %>%
add_header_above(c(" " = 2, "Manipulations" = 4, " "))
kable(exp_table, align = c('c', 'r', 'r', 'r', "r", "r"),
caption = "Summary of our 10 experiments.",
col.names = c("Exp.", "Timing", "Order",
"Blocking", "Label", "Original \nExp."),
format = "latex", booktabs = TRUE) %>%
kable_styling(font_size = 12) %>%
add_header_above(c(" " = 2, "Manipulations" = 4, " "))
?kable
?kable
?column_spec
library(kableExtra)
kable(exp_table, align = c('c', 'r', 'r', 'r', "r", "r"),
caption = "Table 1: Summary of our 12 experiments.",
col.names = c("Exp.", "Timing", "Order",
"Blocking", "Label", "Original Exp.")) %>%
kable_styling(full_width = F) %>%
column_spec(1, bold = T) %>%
kable_styling(font_size = 12)
?include_graphics
